<?php

namespace StarboundLog\Model\Repositories;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\LockMode;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use StarboundLog\Model\Entities\Users;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends EntityRepository
{
    /**
     * @inheritdoc
     *
     * @return \StarboundLog\Model\Entities\Users[]
     */
    public function findAll()
    {
        return parent::findAll();
    }

    /**
     * @inheritdoc
     *
     * @param array $criteria
     * @param array $orderBy
     * @param null  $limit
     * @param null  $offset
     *
     * @return \StarboundLog\Model\Entities\Users[]
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        return parent::findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * @inheritdoc
     *
     * @param mixed $id
     * @param int   $lockMode
     * @param null  $lockVersion
     *
     * @return \StarboundLog\Model\Entities\Users
     */
    public function find($id, $lockMode = LockMode::NONE, $lockVersion = null)
    {
        return parent::find($id, $lockMode, $lockVersion);
    }

    /**
     * @inheritdoc
     *
     * @param array $criteria
     * @param array $orderBy
     *
     * @return \StarboundLog\Model\Entities\Users
     */
    public function findOneBy(array $criteria, array $orderBy = null)
    {
        return parent::findOneBy($criteria, $orderBy);
    }

    /**
     * @param $username
     * @param $password
     *
     * @return Users
     */
    public function auth($username, $password)
    {
        $user = $this->findOneBy(array(
            'userLogin' => $username
        ));
        if ($user && password_verify($password, $user->getUserPassword())) {
            return $user;
        }
        return null;
    }

    /**
     * @param $login
     * @param $mail
     * @param $password
     *
     * @return int
     */
    public function register($login, $password, $mail)
    {
        $user = new Users();
        $user->setUserLogin($login);
        $user->setUserMail($mail);
        $user->setUserPassword(password_hash($password, PASSWORD_DEFAULT));
        $this->getEntityManager()->persist($user);
        $this->getEntityManager()->flush($user);
        return $user->getUserId();
    }
}
